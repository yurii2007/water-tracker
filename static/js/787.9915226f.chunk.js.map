{"version":3,"file":"static/js/787.9915226f.chunk.js","mappings":"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","sources":["components/SignUpForm/SignUpForm.jsx","pages/SignUpPage.jsx"],"sourcesContent":["import React from \"react\";\nimport * as yup from \"yup\";\nimport { Notify } from \"notiflix\";\nimport { Formik, Form, Field } from \"formik\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\nimport { registerThunk } from \"../../redux/User/UserThunk\";\nimport { setStateToken } from \"../../redux/User/UserSlice\";\nimport { usePasswordToggle } from \"../../hooks/usePasswordToggle\";\n\nimport { TogglePasswordIcon } from \"../TogglePasswordVisibility/TogglePasswordVisibility\";\nimport GoogleBtn from \"../shared/GoogleBtn/GoogleBtn\";\nimport {\n  BtnSign,\n  FormContainer,\n  Label,\n  Linking,\n  StyledError,\n  Title,\n} from \"./SignUpForm.styled\";\nimport { MainContainer } from \"../../pages/HomePage/HomePage.styled\";\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"The email is not valid.\")\n    .min(6, \"The email must contain at least six letters.\")\n    .max(64, \"The email must contain a maximum of 64 characters.\")\n    .required(\"Email is required.\")\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9]+[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9]+$/,\n      \"Email is not valid.\"\n    ),\n  password: yup\n    .string()\n    .required(\"Password is required.\")\n    .min(8, \"The password must contain a minimum of 8 characters.\")\n    .max(64, \"The password must contain a maximum of 64 characters.\"),\n  repeatPassword: yup\n    .string()\n    .required(\"Please repeat your password.\")\n    .oneOf([yup.ref(\"password\"), null], \"Passwords must match.\"),\n});\n\nconst SignUpForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { showPasswords, togglePasswordVisibility } = usePasswordToggle([\n    \"password1\",\n    \"password2\",\n  ]);\n  const handleSubmit = ({ email, password, repeatPassword }, { resetForm }) => {\n    if (password !== repeatPassword) {\n      Notify.failure(\"Passwords do not match\", { timeout: 1000 });\n      return;\n    }\n\n    dispatch(registerThunk({ email, password }))\n      .unwrap()\n      .then((data) => {\n        resetForm();\n        dispatch(setStateToken(data.token));\n        Notify.success(\"Welcome aboard! You're now officially registered.\", {\n          timeout: 1000,\n        });\n        navigate(\"/\");\n      })\n      .catch((error) => {\n        Notify.failure(error, { timeout: 1000 });\n      });\n  };\n\n  return (\n    <MainContainer>\n      <FormContainer>\n        <Title>Sign Up</Title>\n        <GoogleBtn />\n        <Formik\n          initialValues={{\n            email: \"\",\n            password: \"\",\n            repeatPassword: \"\",\n          }}\n          onSubmit={handleSubmit}\n          validationSchema={validationSchema}\n        >\n          {({ errors, touched }) => {\n            return (\n              <Form>\n                <Label $error={errors.email && touched.email}>\n                  Enter your email\n                  <Field\n                    autoComplete=\"off\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"E-mail\"\n                  />\n                  <StyledError name=\"email\" component=\"span\" />\n                </Label>\n                <Label $error={errors.password && touched.password}>\n                  Enter your password\n                  <Field\n                    autoComplete=\"off\"\n                    name=\"password\"\n                    type={showPasswords.password1 ? \"text\" : \"password\"}\n                    placeholder=\"Password\"\n                  />\n                  <TogglePasswordIcon\n                    showPassword={showPasswords.password1}\n                    onToggle={() => togglePasswordVisibility(\"password1\")}\n                  />\n                  <StyledError name=\"password\" component=\"span\" />\n                </Label>\n                <Label $error={errors.repeatPassword && touched.repeatPassword}>\n                  Repeat password\n                  <Field\n                    $error={errors.repeatPassword && touched.repeatPassword}\n                    autoComplete=\"off\"\n                    type={showPasswords.password2 ? \"text\" : \"password\"}\n                    name=\"repeatPassword\"\n                    placeholder=\"Repeat password\"\n                  />\n                  <TogglePasswordIcon\n                    showPassword={showPasswords.password2}\n                    onToggle={() => togglePasswordVisibility(\"password2\")}\n                  />\n                  <StyledError name=\"repeatPassword\" component=\"span\" />\n                </Label>\n                <BtnSign type=\"submit\">Sign Up</BtnSign>\n              </Form>\n            );\n          }}\n        </Formik>\n        <Linking to=\"/signin\">Sign in</Linking>\n      </FormContainer>\n    </MainContainer>\n  );\n};\n\nexport default SignUpForm;\n","import SignUpForm from \"../components/SignUpForm/SignUpForm\";\n\nconst SignUpPage = () => {\n  return <SignUpForm />;\n};\n\nexport default SignUpPage;\n"],"names":["validationSchema","yup","shape","email","min","max","required","trim","matches","password","repeatPassword","oneOf","SignUpForm","dispatch","useDispatch","navigate","useNavigate","showPasswords","togglePasswordVisibility","usePasswordToggle","_jsx","MainContainer","children","_jsxs","FormContainer","Title","GoogleBtn","Formik","initialValues","onSubmit","handleSubmit","_ref","_ref2","resetForm","registerThunk","unwrap","then","data","setStateToken","token","Notify","success","timeout","catch","error","failure","_ref3","errors","touched","Form","Label","$error","Field","autoComplete","name","type","placeholder","StyledError","component","password1","TogglePasswordIcon","showPassword","onToggle","password2","BtnSign","Linking","to","SignUpPage"],"sourceRoot":""}