{"version":3,"file":"static/js/651.543d85be.chunk.js","mappings":"qQAsBA,MAAMA,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAEJE,MAAM,sBACNC,IAAI,EAAG,0CACPC,IAAI,GAAI,oDACRC,SAAS,qBACTC,OACAC,QACC,2DACA,sBAEJC,SAAUR,EAAAA,KAEPK,SAAS,wBACTF,IAAI,EAAG,kDACPC,IAAI,GAAI,yDA8Eb,EA3EmBK,KACjB,MAAMC,GAAWC,EAAAA,EAAAA,OACX,cAAEC,EAAa,yBAAEC,IAA6BC,EAAAA,EAAAA,GAAkB,CACpE,YACA,cAeF,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAa,CAAAC,UACZC,EAAAA,EAAAA,MAACC,EAAAA,GAAa,CAAAF,SAAA,EACZF,EAAAA,EAAAA,KAACK,EAAAA,GAAK,CAAAH,SAAC,aACPF,EAAAA,EAAAA,KAACM,EAAAA,EAAS,KACVN,EAAAA,EAAAA,KAACO,EAAAA,GAAM,CACLC,cAAe,CACbrB,MAAO,GACPM,SAAU,IAEZgB,SAvBaC,CAACC,EAAMC,KAAqB,IAAnB,UAAEC,GAAWD,EACzCjB,GAASmB,EAAAA,EAAAA,IAAWH,IACjBI,SACAC,MAAK,KACJH,IACAI,EAAAA,OAAOC,QAAQ,sCAAuC,CACpDC,QAAS,KACT,IAEHC,OAAOC,IACNJ,EAAAA,OAAOK,QAAQD,EAAO,CAAEF,QAAS,KAAO,GACxC,EAaEnC,iBAAkBA,EAAiBkB,SAElCqB,IAA0B,IAAzB,OAAEC,EAAM,QAAEC,GAASF,EACnB,OACEpB,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAAAxB,SAAA,EACHC,EAAAA,EAAAA,MAACwB,EAAAA,GAAK,CAACC,OAAQJ,EAAOrC,OAASsC,EAAQtC,MAAMe,SAAA,CAAC,oBAE5CF,EAAAA,EAAAA,KAAC6B,EAAAA,GAAK,CACJD,OAAQJ,EAAOrC,OAASsC,EAAQtC,MAChC2C,aAAa,MACbC,KAAK,QACLC,KAAK,QACLC,YAAY,YAEdjC,EAAAA,EAAAA,KAACkC,EAAAA,GAAW,CAACH,KAAK,QAAQI,UAAU,aAEtChC,EAAAA,EAAAA,MAACwB,EAAAA,GAAK,CAACC,OAAQJ,EAAO/B,UAAYgC,EAAQhC,SAASS,SAAA,CAAC,uBAElDF,EAAAA,EAAAA,KAAC6B,EAAAA,GAAK,CACJD,OAAQJ,EAAO/B,UAAYgC,EAAQhC,SACnCqC,aAAa,MACbC,KAAK,WACLC,KAAMnC,EAAcuC,UAAY,OAAS,WACzCH,YAAY,cAEdjC,EAAAA,EAAAA,KAACqC,EAAAA,EAAkB,CACjBC,aAAczC,EAAcuC,UAC5BG,SAAUA,IAAMzC,EAAyB,gBAE3CE,EAAAA,EAAAA,KAACkC,EAAAA,GAAW,CAACH,KAAK,WAAWI,UAAU,aAEzCnC,EAAAA,EAAAA,KAACwC,EAAAA,GAAO,CAACR,KAAK,SAAQ9B,SAAC,cAClB,KAIbC,EAAAA,EAAAA,MAACsC,EAAAA,GAAU,CAAAvC,SAAA,EACTF,EAAAA,EAAAA,KAAC0C,EAAAA,GAAO,CAACC,GAAG,mBAAkBzC,SAAC,sBAC/BF,EAAAA,EAAAA,KAAC0C,EAAAA,GAAO,CAACC,GAAG,UAASzC,SAAC,mBAGZ,EC1GpB,EAJmB0C,KACV5C,EAAAA,EAAAA,KAACN,EAAU,G","sources":["components/SignInForm/SignInForm.jsx","pages/SignInPage.jsx"],"sourcesContent":["import React from \"react\";\nimport * as yup from \"yup\";\nimport { Notify } from \"notiflix\";\nimport { Formik, Form, Field } from \"formik\";\nimport { useDispatch } from \"react-redux\";\n\nimport { usePasswordToggle } from \"../../hooks/usePasswordToggle\";\nimport { loginThunk } from \"../../redux/User/UserThunk\";\n\nimport { TogglePasswordIcon } from \"../TogglePasswordVisibility/TogglePasswordVisibility\";\nimport GoogleBtn from \"../shared/GoogleBtn/GoogleBtn\";\nimport {\n  BtnSign,\n  ForgotLink,\n  FormContainer,\n  Label,\n  Linking,\n  StyledError,\n  Title,\n} from \"../SignUpForm/SignUpForm.styled\";\nimport { MainContainer } from \"../../pages/HomePage/HomePage.styled\";\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"email is not valid\")\n    .min(6, \"the email must containe min six leters\")\n    .max(64, \"the email must containe maximum of 64 characters\")\n    .required(\"email is required\")\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9]+[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9]+$/,\n      \"email is not valid\"\n    ),\n  password: yup\n    .string()\n    .required(\"password is required\")\n    .min(8, \"the password must containe min of 8 characters\")\n    .max(64, \"the password must containe maximum of 64 characters\"),\n});\n\nconst SignInForm = () => {\n  const dispatch = useDispatch();\n  const { showPasswords, togglePasswordVisibility } = usePasswordToggle([\n    \"password1\",\n    \"password2\",\n  ]);\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(loginThunk(values))\n      .unwrap()\n      .then(() => {\n        resetForm();\n        Notify.success(\"Welcome back! You're now logged in.\", {\n          timeout: 1000,\n        });\n      })\n      .catch((error) => {\n        Notify.failure(error, { timeout: 1000 });\n      });\n  };\n  return (\n    <MainContainer>\n      <FormContainer>\n        <Title>Sign In</Title>\n        <GoogleBtn />\n        <Formik\n          initialValues={{\n            email: \"\",\n            password: \"\",\n          }}\n          onSubmit={handleSubmit}\n          validationSchema={validationSchema}\n        >\n          {({ errors, touched }) => {\n            return (\n              <Form>\n                <Label $error={errors.email && touched.email}>\n                  Enter your email\n                  <Field\n                    $error={errors.email && touched.email}\n                    autoComplete=\"off\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"E-mail\"\n                  />\n                  <StyledError name=\"email\" component=\"span\" />\n                </Label>\n                <Label $error={errors.password && touched.password}>\n                  Enter your password\n                  <Field\n                    $error={errors.password && touched.password}\n                    autoComplete=\"off\"\n                    name=\"password\"\n                    type={showPasswords.password1 ? \"text\" : \"password\"}\n                    placeholder=\"Password\"\n                  />\n                  <TogglePasswordIcon\n                    showPassword={showPasswords.password1}\n                    onToggle={() => togglePasswordVisibility(\"password1\")}\n                  />\n                  <StyledError name=\"password\" component=\"span\" />\n                </Label>\n                <BtnSign type=\"submit\">Sign In</BtnSign>\n              </Form>\n            );\n          }}\n        </Formik>\n        <ForgotLink>\n          <Linking to=\"/forgot-password\">Forgot password?</Linking>\n          <Linking to=\"/signup\">Sign Up</Linking>\n        </ForgotLink>\n      </FormContainer>\n    </MainContainer>\n  );\n};\n\nexport default SignInForm;\n","import SignInForm from \"../components/SignInForm/SignInForm\";\n\nconst SignInPage = () => {\n  return <SignInForm />;\n};\n\nexport default SignInPage;\n"],"names":["validationSchema","yup","shape","email","min","max","required","trim","matches","password","SignInForm","dispatch","useDispatch","showPasswords","togglePasswordVisibility","usePasswordToggle","_jsx","MainContainer","children","_jsxs","FormContainer","Title","GoogleBtn","Formik","initialValues","onSubmit","handleSubmit","values","_ref","resetForm","loginThunk","unwrap","then","Notify","success","timeout","catch","error","failure","_ref2","errors","touched","Form","Label","$error","Field","autoComplete","name","type","placeholder","StyledError","component","password1","TogglePasswordIcon","showPassword","onToggle","BtnSign","ForgotLink","Linking","to","SignInPage"],"sourceRoot":""}