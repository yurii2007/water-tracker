{"version":3,"file":"static/js/787.18659a61.chunk.js","mappings":"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","sources":["components/SignUpForm/SignUpForm.jsx","pages/SignUpPage.jsx"],"sourcesContent":["import React from \"react\";\nimport * as yup from \"yup\";\nimport Notiflix from \"notiflix\";\nimport { Formik, Form } from \"formik\";\nimport {\n  AuthUpForma,\n  BtnSign,\n  FormContainer,\n  FormField,\n  Input,\n  Lable,\n  Linking,\n  StyledError,\n  Title,\n} from \"./SignUpForm.styled\";\nimport { useDispatch } from \"react-redux\";\nimport { registerThunk } from \"../../redux/User/UserThunk\";\nimport { usePasswordToggle } from \"../../Helpers/usePasswordToggle\";\nimport { TogglePasswordIcon } from \"../TogglePasswordVisibility/TogglePasswordVisibility\";\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"email is not valid\")\n    .min(6, \"the email must containe min six leters\")\n    .required(\"email is required\")\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9]+[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9]+$/,\n      \"email is not valid\"\n    ),\n  password: yup\n    .string()\n    .required(\"password is required\")\n    .min(8, \"Password must be 8 characters long\"),\n  repeatPassword: yup\n    .string()\n    .required(\"repeat password is required\")\n    .oneOf([yup.ref(\"password\"), null], 'Must match \"password\" field value'),\n});\n\nconst SignUpForm = () => {\n  const dispatch = useDispatch();\n  const { showPasswords, togglePasswordVisibility } = usePasswordToggle([\n    \"password1\",\n    \"password2\",\n  ]);\n  const handleSubmit = ({ email, password, repeatPassword }, { resetForm }) => {\n    if (password !== repeatPassword) {\n      Notiflix.Notify.failure(\"error\");\n      return;\n    }\n\n    dispatch(registerThunk({ email, password }))\n      .unwrap()\n      .then(() => {\n        resetForm();\n        Notiflix.Notify.success(\"success\");\n      })\n      .catch((error) => {\n        Notiflix.Notify.failure(error);\n      });\n  };\n\n  return (\n    <FormContainer>\n      <AuthUpForma>\n        <Title>Sign Up</Title>\n        <Formik\n          initialValues={{\n            email: \"\",\n            password: \"\",\n            repeatPassword: \"\",\n          }}\n          onSubmit={handleSubmit}\n          validationSchema={validationSchema}\n        >\n          {({ errors, touched }) => {\n            return (\n              <Form>\n                <Lable>Enter your email</Lable>\n                <Input $error={errors.email && touched.email}>\n                  <FormField\n                    $error={errors.email && touched.email}\n                    autoComplete=\"off\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"E-mail\"\n                  />\n                </Input>\n                <StyledError name=\"email\" component=\"div\" />\n                <Lable>Enter your password</Lable>\n                <Input $error={errors.password && touched.password}>\n                  <FormField\n                    $error={errors.password && touched.password}\n                    autoComplete=\"off\"\n                    name=\"password\"\n                    type={showPasswords.password1 ? \"text\" : \"password\"}\n                    placeholder=\"Password\"\n                  />\n                  <TogglePasswordIcon\n                    showPassword={showPasswords.password1}\n                    onToggle={() => togglePasswordVisibility(\"password1\")}\n                  />\n                </Input>\n                <StyledError name=\"password\" component=\"div\" />\n                <Lable>Repeat password</Lable>\n                <Input $error={errors.repeatPassword && touched.repeatPassword}>\n                  <FormField\n                    $error={errors.repeatPassword && touched.repeatPassword}\n                    autoComplete=\"off\"\n                    type={showPasswords.password2 ? \"text\" : \"password\"}\n                    name=\"repeatPassword\"\n                    placeholder=\"Repeat password\"\n                  />\n                  <TogglePasswordIcon\n                    showPassword={showPasswords.password2}\n                    onToggle={() => togglePasswordVisibility(\"password2\")}\n                  />\n                </Input>\n                <StyledError name=\"repeatPassword\" component=\"div\" />\n                <BtnSign type=\"submit\">Sign Up</BtnSign>\n              </Form>\n            );\n          }}\n        </Formik>\n        <Linking to=\"/signin\">Sign in</Linking>\n      </AuthUpForma>\n    </FormContainer>\n  );\n};\n\nexport default SignUpForm;\n","import SignUpForm from \"../components/SignUpForm/SignUpForm\";\n\nconst SignUpPage = () => {\n  return <SignUpForm />;\n};\n\nexport default SignUpPage;\n"],"names":["validationSchema","yup","shape","email","min","required","trim","matches","password","repeatPassword","oneOf","SignUpForm","dispatch","useDispatch","showPasswords","togglePasswordVisibility","usePasswordToggle","_jsx","FormContainer","children","_jsxs","AuthUpForma","Title","Formik","initialValues","onSubmit","handleSubmit","_ref","_ref2","resetForm","registerThunk","unwrap","then","Notiflix","success","catch","error","failure","_ref3","errors","touched","Form","Lable","Input","$error","FormField","autoComplete","name","type","placeholder","StyledError","component","password1","TogglePasswordIcon","showPassword","onToggle","password2","BtnSign","Linking","to","SignUpPage"],"sourceRoot":""}